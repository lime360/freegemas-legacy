<html>
	<head>
		<title>Gosu C++ Reference</title>
		<link rel="stylesheet" href="cpp.css" type="text/css" charset="utf-8">
	</head>
	<body>
	<div class="everything">
<!-- Generated by Doxygen 1.5.9 -->
<script type="text/javascript">
<!--
function changeDisplayState (e){
  var num=this.id.replace(/[^[0-9]/g,'');
  var button=this.firstChild;
  var sectionDiv=document.getElementById('dynsection'+num);
  if (sectionDiv.style.display=='none'||sectionDiv.style.display==''){
    sectionDiv.style.display='block';
    button.src='open.gif';
  }else{
    sectionDiv.style.display='none';
    button.src='closed.gif';
  }
}
function initDynSections(){
  var divs=document.getElementsByTagName('div');
  var sectionCounter=1;
  for(var i=0;i<divs.length-1;i++){
    if(divs[i].className=='dynheader'&&divs[i+1].className=='dynsection'){
      var header=divs[i];
      var section=divs[i+1];
      var button=header.firstChild;
      if (button!='IMG'){
        divs[i].insertBefore(document.createTextNode(' '),divs[i].firstChild);
        button=document.createElement('img');
        divs[i].insertBefore(button,divs[i].firstChild);
      }
      header.style.cursor='pointer';
      header.onclick=changeDisplayState;
      header.id='dynheader'+sectionCounter;
      button.src='closed.gif';
      section.id='dynsection'+sectionCounter;
      section.style.display='none';
      section.style.marginLeft='14px';
      sectionCounter++;
    }
  }
}
window.onload = initDynSections;
-->
</script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.html"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.html"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<h1>Font.hpp</h1><a href="_font_8hpp.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 
<a name="l00003"></a>00003 
<a name="l00004"></a>00004 <span class="preprocessor">#ifndef GOSU_FONT_HPP</span>
<a name="l00005"></a>00005 <span class="preprocessor"></span><span class="preprocessor">#define GOSU_FONT_HPP</span>
<a name="l00006"></a>00006 <span class="preprocessor"></span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &lt;<a class="code" href="_fwd_8hpp.html" title="Contains declarations of all of Gosu&amp;#39;s available classes.">Gosu/Fwd.hpp</a>&gt;</span>
<a name="l00008"></a>00008 <span class="preprocessor">#include &lt;<a class="code" href="_color_8hpp.html" title="Interface of the Color class.">Gosu/Color.hpp</a>&gt;</span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;<a class="code" href="_graphics_base_8hpp.html" title="Contains general typedefs and enums related to graphics.">Gosu/GraphicsBase.hpp</a>&gt;</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &lt;<a class="code" href="_platform_8hpp.html" title="Macros and utility functions to facilitate programming on all of Gosu&amp;#39;s supported...">Gosu/Platform.hpp</a>&gt;</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &lt;boost/shared_ptr.hpp&gt;</span>
<a name="l00012"></a>00012 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 <span class="keyword">namespace </span>Gosu
<a name="l00015"></a>00015 {
<a name="l00020"></a><a class="code" href="class_gosu_1_1_font.html">00020</a>     <span class="keyword">class </span><a class="code" href="class_gosu_1_1_font.html" title="A font can be used to draw text on a Graphics object very flexibly.">Font</a>
<a name="l00021"></a>00021     {
<a name="l00022"></a>00022         <span class="keyword">struct </span>Impl;
<a name="l00023"></a>00023         boost::shared_ptr&lt;Impl&gt; pimpl;
<a name="l00024"></a>00024 
<a name="l00025"></a>00025     <span class="keyword">public</span>:
<a name="l00032"></a>00032         <a class="code" href="class_gosu_1_1_font.html#e4c06910c2b655a0012d982ff4fde515" title="Constructs a font that can be drawn onto the graphics object.">Font</a>(<a class="code" href="class_gosu_1_1_graphics.html" title="Serves as the target of all drawing and provides primitive drawing functionality...">Graphics</a>&amp; graphics, <span class="keyword">const</span> std::wstring&amp; fontName,
<a name="l00033"></a>00033             <span class="keywordtype">unsigned</span> fontHeight, <span class="keywordtype">unsigned</span> fontFlags = <a class="code" href="namespace_gosu.html#08da397ed09e759ba3392b7361cabe62da182ed25a89bbc7d45fda9de06b116b">ffBold</a>);
<a name="l00034"></a>00034         
<a name="l00036"></a>00036         std::wstring <a class="code" href="class_gosu_1_1_font.html#89b454fb34dd42078a6b189747a92227" title="Returns the name of the font that was used to create it.">name</a>() <span class="keyword">const</span>;
<a name="l00037"></a>00037         
<a name="l00039"></a>00039         <span class="keywordtype">unsigned</span> <a class="code" href="class_gosu_1_1_font.html#9357299749e270dbd01e7fb9f841ae54" title="Returns the height of the font, in pixels.">height</a>() <span class="keyword">const</span>;
<a name="l00040"></a>00040         
<a name="l00042"></a>00042         <span class="keywordtype">unsigned</span> <a class="code" href="class_gosu_1_1_font.html#3ecd8c78d0c01ac480f3b2bbbdbefe4d" title="Returns the flags used to create the font characters.">flags</a>() <span class="keyword">const</span>;
<a name="l00043"></a>00043         
<a name="l00045"></a>00045         <span class="keywordtype">double</span> <a class="code" href="class_gosu_1_1_font.html#ee66d136e3b5b801d146cc1134a0635a" title="Returns the width, in pixels, the given text would occupy if drawn.">textWidth</a>(<span class="keyword">const</span> std::wstring&amp; text, <span class="keywordtype">double</span> factorX = 1) <span class="keyword">const</span>;
<a name="l00046"></a>00046         
<a name="l00049"></a>00049         <span class="keywordtype">void</span> <a class="code" href="class_gosu_1_1_font.html#2f05c4a54df04e1c320c2aa6f12d665a" title="Draws text so the top left corner of the text is at (x; y).">draw</a>(<span class="keyword">const</span> std::wstring&amp; text, <span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <a class="code" href="namespace_gosu.html#a2fd8fe9574c0ad3fd52557cb160be49" title="Represents the Z position of something drawn with Gosu&amp;#39;s graphics system.">ZPos</a> z,
<a name="l00050"></a>00050             <span class="keywordtype">double</span> factorX = 1, <span class="keywordtype">double</span> factorY = 1,
<a name="l00051"></a>00051             <a class="code" href="class_gosu_1_1_color.html" title="Represents an ARGB color value with 8 bits for each channel.">Color</a> c = <a class="code" href="class_gosu_1_1_color.html#a5615ef4b8de08b74ae6eea79fc4c950">Color::WHITE</a>, <a class="code" href="namespace_gosu.html#769656b1f560bc3d1bbdb47f8ca4eda9" title="Determines the way colors are combined when one is drawn onto another.">AlphaMode</a> mode = <a class="code" href="namespace_gosu.html#769656b1f560bc3d1bbdb47f8ca4eda9d1661cf5d3ba68fcbdca99f9dcc832e0" title="The color&amp;#39;s channels will be interpolated.">amDefault</a>) <span class="keyword">const</span>;
<a name="l00052"></a>00052         
<a name="l00059"></a>00059         <span class="keywordtype">void</span> <a class="code" href="class_gosu_1_1_font.html#242a160ce8580c1680cbf97300152eee" title="Draws text at a position relative to (x; y).">drawRel</a>(<span class="keyword">const</span> std::wstring&amp; text, <span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <a class="code" href="namespace_gosu.html#a2fd8fe9574c0ad3fd52557cb160be49" title="Represents the Z position of something drawn with Gosu&amp;#39;s graphics system.">ZPos</a> z,
<a name="l00060"></a>00060             <span class="keywordtype">double</span> relX, <span class="keywordtype">double</span> relY, <span class="keywordtype">double</span> factorX = 1, <span class="keywordtype">double</span> factorY = 1,
<a name="l00061"></a>00061             <a class="code" href="class_gosu_1_1_color.html" title="Represents an ARGB color value with 8 bits for each channel.">Color</a> c = <a class="code" href="class_gosu_1_1_color.html#a5615ef4b8de08b74ae6eea79fc4c950">Color::WHITE</a>, <a class="code" href="namespace_gosu.html#769656b1f560bc3d1bbdb47f8ca4eda9" title="Determines the way colors are combined when one is drawn onto another.">AlphaMode</a> mode = <a class="code" href="namespace_gosu.html#769656b1f560bc3d1bbdb47f8ca4eda9d1661cf5d3ba68fcbdca99f9dcc832e0" title="The color&amp;#39;s channels will be interpolated.">amDefault</a>) <span class="keyword">const</span>;
<a name="l00062"></a>00062         
<a name="l00063"></a>00063 <span class="preprocessor">        #ifndef SWIG</span>
<a name="l00064"></a>00064 <span class="preprocessor"></span>        <a class="code" href="_platform_8hpp.html#ccce161ac962b60b7a4bf40dca7d1b3d">GOSU_DEPRECATED</a>
<a name="l00065"></a>00065 <span class="preprocessor">        #endif</span>
<a name="l00068"></a>00068 <span class="preprocessor">        void drawRot(const std::wstring&amp; text, double x, double y, ZPos z, double angle,</span>
<a name="l00069"></a>00069 <span class="preprocessor"></span>            <span class="keywordtype">double</span> factorX = 1, <span class="keywordtype">double</span> factorY = 1,
<a name="l00070"></a>00070             <a class="code" href="class_gosu_1_1_color.html" title="Represents an ARGB color value with 8 bits for each channel.">Color</a> c = <a class="code" href="class_gosu_1_1_color.html#a5615ef4b8de08b74ae6eea79fc4c950">Color::WHITE</a>, <a class="code" href="namespace_gosu.html#769656b1f560bc3d1bbdb47f8ca4eda9" title="Determines the way colors are combined when one is drawn onto another.">AlphaMode</a> mode = <a class="code" href="namespace_gosu.html#769656b1f560bc3d1bbdb47f8ca4eda9d1661cf5d3ba68fcbdca99f9dcc832e0" title="The color&amp;#39;s channels will be interpolated.">amDefault</a>) <span class="keyword">const</span>;
<a name="l00071"></a>00071     };
<a name="l00072"></a>00072 }
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 <span class="preprocessor">#endif</span>
</pre></div></div>
		<p class="footer">Documentation not clear enough? Please go to one of the places listed on <a href="http://www.libgosu.org/">http://www.libgosu.org/</a> and leave feedback. Thanks!</p>
		</div>
	</body>
</html>
