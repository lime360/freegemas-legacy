<html>
	<head>
		<title>Gosu C++ Reference</title>
		<link rel="stylesheet" href="cpp.css" type="text/css" charset="utf-8">
	</head>
	<body>
	<div class="everything">
<!-- Generated by Doxygen 1.5.9 -->
<script type="text/javascript">
<!--
function changeDisplayState (e){
  var num=this.id.replace(/[^[0-9]/g,'');
  var button=this.firstChild;
  var sectionDiv=document.getElementById('dynsection'+num);
  if (sectionDiv.style.display=='none'||sectionDiv.style.display==''){
    sectionDiv.style.display='block';
    button.src='open.gif';
  }else{
    sectionDiv.style.display='none';
    button.src='closed.gif';
  }
}
function initDynSections(){
  var divs=document.getElementsByTagName('div');
  var sectionCounter=1;
  for(var i=0;i<divs.length-1;i++){
    if(divs[i].className=='dynheader'&&divs[i+1].className=='dynsection'){
      var header=divs[i];
      var section=divs[i+1];
      var button=header.firstChild;
      if (button!='IMG'){
        divs[i].insertBefore(document.createTextNode(' '),divs[i].firstChild);
        button=document.createElement('img');
        divs[i].insertBefore(button,divs[i].firstChild);
      }
      header.style.cursor='pointer';
      header.onclick=changeDisplayState;
      header.id='dynheader'+sectionCounter;
      button.src='closed.gif';
      section.id='dynsection'+sectionCounter;
      section.style.display='none';
      section.style.marginLeft='14px';
      sectionCounter++;
    }
  }
}
window.onload = initDynSections;
-->
</script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.html"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.html"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<h1>WinUtility.hpp</h1><a href="_win_utility_8hpp.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 
<a name="l00003"></a>00003 
<a name="l00004"></a>00004 
<a name="l00005"></a>00005 
<a name="l00006"></a>00006 <span class="preprocessor">#ifndef GOSU_WINUTILITY_HPP</span>
<a name="l00007"></a>00007 <span class="preprocessor"></span><span class="preprocessor">#define GOSU_WINUTILITY_HPP</span>
<a name="l00008"></a>00008 <span class="preprocessor"></span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;windows.h&gt;</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &lt;<a class="code" href="_platform_8hpp.html" title="Macros and utility functions to facilitate programming on all of Gosu&amp;#39;s supported...">Gosu/Platform.hpp</a>&gt;</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &lt;boost/function.hpp&gt;</span>
<a name="l00012"></a>00012 <span class="preprocessor">#include &lt;boost/shared_ptr.hpp&gt;</span>
<a name="l00013"></a>00013 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00014"></a>00014 
<a name="l00015"></a>00015 <span class="keyword">namespace </span>Gosu
<a name="l00016"></a>00016 {
<a name="l00018"></a><a class="code" href="namespace_gosu_1_1_win.html">00018</a>     <span class="keyword">namespace </span>Win
<a name="l00019"></a>00019     {
<a name="l00021"></a>00021         HINSTANCE <a class="code" href="namespace_gosu_1_1_win.html#83b6e6b81742595a0e9203484703db1b" title="Returns the instance handle of the application.">instance</a>();
<a name="l00022"></a>00022 
<a name="l00025"></a>00025         <span class="keywordtype">void</span> <a class="code" href="namespace_gosu_1_1_win.html#31f2a986954cbda89d833e5c4b6023bc" title="Blocking function which waits for the next message, processes it, then returns.">handleMessage</a>();
<a name="l00026"></a>00026 
<a name="l00029"></a>00029         <span class="keywordtype">void</span> <a class="code" href="namespace_gosu_1_1_win.html#d00342fe1c6ac246a35732e61c814f66" title="Non-blocking function which processes all waiting messages but does not wait for...">processMessages</a>();
<a name="l00030"></a>00030 
<a name="l00034"></a>00034         <span class="keywordtype">void</span> <a class="code" href="namespace_gosu_1_1_win.html#7d2d60d6682043477b9765af5433a0db" title="Registers a function to be called by handleMessage and processMessages.">registerMessageHook</a>(<span class="keyword">const</span> boost::function&lt;<span class="keywordtype">bool</span> (MSG&amp;)&gt;&amp; hook);
<a name="l00035"></a>00035         
<a name="l00039"></a>00039         GOSU_NORETURN <span class="keywordtype">void</span> <a class="code" href="namespace_gosu_1_1_win.html#9b691c48faa83e1f04f3c185f4fc88e0" title="Throws an exception according to the error which GetLastError() returns, optionally...">throwLastError</a>(<span class="keyword">const</span> std::string&amp; action = <span class="stringliteral">""</span>);
<a name="l00040"></a>00040 
<a name="l00044"></a>00044         <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;
<a name="l00045"></a><a class="code" href="namespace_gosu_1_1_win.html#6040740de3117cb7f53d2458e29e0d33">00045</a>         <span class="keyword">inline</span> T <a class="code" href="namespace_gosu_1_1_win.html#6040740de3117cb7f53d2458e29e0d33" title="Small helper function that throws an exception whenever the value passed through...">check</a>(T valToCheck, <span class="keyword">const</span> std::string&amp; action = <span class="stringliteral">""</span>)
<a name="l00046"></a>00046         {
<a name="l00047"></a>00047             <span class="keywordflow">if</span> (!valToCheck)
<a name="l00048"></a>00048                 <a class="code" href="namespace_gosu_1_1_win.html#9b691c48faa83e1f04f3c185f4fc88e0" title="Throws an exception according to the error which GetLastError() returns, optionally...">throwLastError</a>(action);
<a name="l00049"></a>00049             <span class="keywordflow">return</span> valToCheck;
<a name="l00050"></a>00050         }
<a name="l00051"></a>00051 
<a name="l00052"></a>00052         <span class="comment">// IMPR: Why can't I use mem_fn for releasing objects even though it is</span>
<a name="l00053"></a>00053         <span class="comment">// shown like that in the shared_ptr documentation?</span>
<a name="l00054"></a>00054         <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;
<a name="l00055"></a><a class="code" href="namespace_gosu_1_1_win.html#a94c44a4738f72711497fe26cb15c8b6">00055</a>         <span class="keywordtype">void</span> <a class="code" href="namespace_gosu_1_1_win.html#a94c44a4738f72711497fe26cb15c8b6">releaseComPtr</a>(T* ptr)
<a name="l00056"></a>00056         {
<a name="l00057"></a>00057             ptr-&gt;Release();
<a name="l00058"></a>00058         }
<a name="l00059"></a>00059 
<a name="l00062"></a>00062         <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;
<a name="l00063"></a><a class="code" href="namespace_gosu_1_1_win.html#a428c0599282230ad8c8c03a4eb1a054">00063</a>         <span class="keyword">inline</span> boost::shared_ptr&lt;T&gt; <a class="code" href="namespace_gosu_1_1_win.html#a428c0599282230ad8c8c03a4eb1a054" title="Small helper function that transfers ownership of a COM interface to a boost::shared_ptr...">shareComPtr</a>(T* ptr)
<a name="l00064"></a>00064         {
<a name="l00065"></a>00065             <span class="keywordflow">return</span> boost::shared_ptr&lt;T&gt;(ptr, releaseComPtr&lt;T&gt;);
<a name="l00066"></a>00066         }
<a name="l00067"></a>00067 
<a name="l00069"></a>00069         std::wstring <a class="code" href="namespace_gosu_1_1_win.html#6a880b46db664c1be2b5115a1090c37b" title="Returns the executable&amp;#39;s filename.">appFilename</a>();
<a name="l00070"></a>00070 
<a name="l00072"></a>00072         std::wstring <a class="code" href="namespace_gosu_1_1_win.html#23f9098ea654c70ae845ec3fe6e9f20c" title="Returns the executable&amp;#39;s containing directory.">appDirectory</a>();
<a name="l00073"></a>00073     }
<a name="l00074"></a>00074 }
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 <span class="preprocessor">#endif</span>
</pre></div></div>
		<p class="footer">Documentation not clear enough? Please go to one of the places listed on <a href="http://www.libgosu.org/">http://www.libgosu.org/</a> and leave feedback. Thanks!</p>
		</div>
	</body>
</html>
